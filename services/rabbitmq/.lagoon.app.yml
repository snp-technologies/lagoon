apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: lagoon-openshift-template-node
parameters:
  - name: SERVICE_NAME
    description: Name of this service
    required: true
  - name: SAFE_BRANCH
    description: Which branch this belongs to, special chars replaced with dashes
    required: true
  - name: SAFE_PROJECT
    description: Which project this belongs to, special chars replaced with dashes
    required: true
  - name: BRANCH
    description: Which branch this belongs to, original value
    required: true
  - name: PROJECT
    description: Which project this belongs to, original value
    required: true
  - name: LAGOON_GIT_SHA
    description: git hash sha of the current deployment
    required: true
  - name: SERVICE_ROUTER_URL
    description: URL of the Router for this service
    value: ""
  - name: OPENSHIFT_PROJECT
    description: Name of the Project that this service is in
    required: true
  - name: REGISTRY
    description: Registry where Images are pushed to
    required: true
  - name: DEPLOYMENT_STRATEGY
    description: Strategy of Deploymentconfig
    value: "Rolling"
  - name: SERVICE_IMAGE
    description: Pullable image of service
    required: true
  - name: CRONJOBS
    description: Oneliner of Cronjobs
    value: ""
objects:
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${SERVICE_NAME}-volume
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    labels:
      branch: ${SAFE_BRANCH}
      project: ${SAFE_PROJECT}
    name: ${SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      service: ${SERVICE_NAME}
    strategy:
      type: ${DEPLOYMENT_STRATEGY}
    template:
      metadata:
        creationTimestamp: null
        labels:
          service: ${SERVICE_NAME}
          branch: ${SAFE_BRANCH}
          project: ${SAFE_PROJECT}
      spec:
        containers:
        - image: ${SERVICE_IMAGE}
          name: ${SERVICE_NAME}
          ports:
          - containerPort: 15672
            protocol: TCP
          - containerPort: 5672
            protocol: TCP
          readinessProbe:
            tcpSocket:
              port: 5672
            initialDelaySeconds: 15
            timeoutSeconds: 1
          envFrom:
          - configMapRef:
              name: lagoon-env
          env:
            - name: RABBITMQ_DEFAULT_USER
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-username
                  key: RABBITMQ_USERNAME
            - name: RABBITMQ_DEFAULT_PASS
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-password
                  key: RABBITMQ_PASSWORD
            - name: SERVICE_NAME
              value: ${SERVICE_NAME}
            - name: CRONJOBS
              value: ${CRONJOBS}
          resources:
            requests:
              cpu: 10m
              memory: 10Mi
          volumeMounts:
          - mountPath: /var/lib/rabbitmq
            name: ${SERVICE_NAME}-volume
        volumes:
        - name: ${SERVICE_NAME}-volume
          persistentVolumeClaim:
            claimName: ${SERVICE_NAME}-volume
    test: false
    triggers:
    - type: ConfigChange
  status: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      service: ${SERVICE_NAME}
      branch: ${SAFE_BRANCH}
      project: ${SAFE_PROJECT}
    name: ${SERVICE_NAME}
  spec:
    ports:
    - name: 15672-tcp
      port: 15672
      protocol: TCP
      targetPort: 15672
    - name: 5672-tcp
      port: 5672
      protocol: TCP
      targetPort: 5672
    selector:
      service: ${SERVICE_NAME}
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Route
  metadata:
    creationTimestamp: null
    labels:
      service: ${SERVICE_NAME}
      branch: ${SAFE_BRANCH}
      project: ${SAFE_PROJECT}
    name: ${SERVICE_NAME}
  spec:
    host: ${SERVICE_ROUTER_URL}
    port:
      targetPort: 15672-tcp
    to:
      kind: Service
      name: ${SERVICE_NAME}
