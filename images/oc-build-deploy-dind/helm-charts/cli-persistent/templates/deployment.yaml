apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      annotations:
        appuio.ch/backupcommand: /bin/sh -c "if [[ $MARIADB_HOST ]]; then mysqldump --max-allowed-packet=500M --events --routines --quick --add-locks --no-autocommit --single-transaction --no-create-db -h $MARIADB_HOST -u $MARIADB_USERNAME -p$MARIADB_PASSWORD $MARIADB_DATABASE; fi"
        backup.appuio.ch/file-extension: .mysql.sql
      labels:
        app: {{ template "name" . }}
        release: {{ .Release.Name }}
    spec:
      volumes:
      - name: "{{ .Values.PERSISTENT_STORAGE_NAME }}"
        persistentVolumeClaim:
          claimName: "{{ .Values.PERSISTENT_STORAGE_NAME }}"
      - name: lagoon-sshkey
        secret:
          defaultMode: 420
          secretName: lagoon-sshkey
      containers:
        - name: {{ .Chart.Name }} 
          image: "{{ .Values.image.repository }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          envFrom:
            - configMapRef:
                name: lagoon-env
          env:
            - name: LAGOON_GIT_SHA
              value: "{{.Values.LAGOON_GIT_SHA}}"
            - name: SERVICE_NAME       
              value: "{{.Values.SERVICE_NAME}}"
            - name: CRONJOBS
              value: "{{.Values.CRONJOBS}}"
          env:
            - name: PROJECT
              value: "{{.Values.PROJECT}}"
            - name: OPENSHIFT_PROJECT
              value: "{{.Values.OPENSHIFT_PROJECT}}"
            - name: SAFE_BRANCH
              value: "{{.Values.SAFE_BRANCH}}"
            - name: SAFE_PROJECT
              value: "{{.Values.SAFE_PROJECT}}"
            - name: BRANCH
              value: "{{.Values.BRANCH}}"
            - name: LAGOON_GIT_SHA
              value: "{{.Values.LAGOON_GIT_SHA}}"
            - name: SERVICE_ROUTER_URL
              value: "{{.Values.SERVICE_ROUTER_URL}}"
            - name: REGISTRY
              value: "{{.Values.REGISTRY}}"
            - name: DEPLOYMENT_STRATEGY
              value: "{{.Values.DEPLOYMENT_STRATEGY}}"
            - name: SERVICE_IMAGE
              value: "{{.Values.SERVICE_IMAGE}}"
            - name: CRONJOBS
              value: "{{.Values.CRONJOBS}}"
            - name: ENVIRONMENT_TYPE
              value: "{{.Values.ENVIRONMENT_TYPE}}"
            - name: OPENSHIFT_NAME
              value: "{{.Values.OPENSHIFT_NAME}}"
            - name: MONITORING_URLS
              value: "{{.Values.MONITORING_URLS}}"
            - name: SERVICE_IMAGE
              value: "{{.Values.SERVICE_IMAGE}}"
            - name: SERVICE_NAME
              value: "{{.Values.SERVICE_NAME}}"
            - name: PERSISTENT_STORAGE_PATH
              value: "{{.Values.PERSISTENT_STORAGE_PATH}}"
            - name: PERSISTENT_STORAGE_NAME
              value: "{{.Values.PERSISTENT_STORAGE_NAME}}"
            - name: PERSISTENT_STORAGE_CLASS
              value: "{{.Values.PERSISTENT_STORAGE_CLASS}}"
            - name: PERSISTENT_STORAGE_SIZE
              value: "{{.Values.PERSISTENT_STORAGE_SIZE}}"
          volumeMounts:
            - name: "{{ .Values.PERSISTENT_STORAGE_NAME }}"
              mountPath: "{{ .Values.PERSISTENT_STORAGE_PATH }}"
            - mountPath: /var/run/secrets/lagoon/sshkey/
              name: lagoon-sshkey
              readOnly: true
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
    {{- end }}
